<?xml version="1.0" encoding="UTF-8"?>
    <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
        <channel>
            <title>Aleksandar Go≈°evski</title>
            <description>Thoughts about web development, design, tools, etc.</description>
            <link>http://www.goschevski.com</link>

            <atom:link href="http://www.goschevski.com/rss.xml" rel="self" type="application/rss+xml" />

            
                <item>
                    <title>The Mighty Ansible</title>
                    <description>&lt;p&gt;I was always interested in automation tools, but they all seemed complicated. When a &lt;a href=&quot;https://www.hcg.ninja/&quot;&gt;friend&lt;/a&gt; explained me in 5 minutes how &lt;a href=&quot;https://www.ansible.com/&quot;&gt;Ansible&lt;/a&gt; works and how easy is to setup new project, I was amazed.&lt;/p&gt;
&lt;h3 id=&quot;what-are-the-automation-tools-&quot;&gt;What are the automation tools?&lt;/h3&gt;
&lt;p&gt;We use automation tools to automate machine or cluster of machines (infrastructure) setup. Imagine yourself SSHing to 100 servers and running same or similar commands to each one of them. Tools like Ansible could help you set up servers in parallel.&lt;/p&gt;
&lt;h3 id=&quot;how-does-ansible-works-&quot;&gt;How does Ansible works?&lt;/h3&gt;
&lt;p&gt;Ansible connects to your machines over SSH and runs tasks that you defined. After it finishes, it removes these tasks, so your machine stays clean and looks like you manually executed commands. It&amp;#39;s using Python in the background, which most (if not all) systems have installed by default, so it does not require any pre-installation on the machines, and that&amp;#39;s what makes Ansible so great.&lt;/p&gt;
&lt;p&gt;Tasks that you write are text files (YAML), which means that you can store them on git. Because of this cool feature, you can have a history of changes you&amp;#39;ve made on your machines.&lt;/p&gt;
&lt;h3 id=&quot;how-should-i-try-it-&quot;&gt;How should I try it?&lt;/h3&gt;
&lt;p&gt;You can install Ansible on your machine and setup VMs using Vagrant. That&amp;#39;s all you need to start. The good thing about this approach is that you can &amp;quot;develop&amp;quot; your infrastructure locally and then when you&amp;#39;re ready, replace IPs of VMs to production machines inside config file.&lt;/p&gt;
&lt;h3 id=&quot;tutorial&quot;&gt;Tutorial&lt;/h3&gt;
&lt;p&gt;I&amp;#39;m pretty sure you can find a bunch of tutorials, so I won&amp;#39;t write one, but I will share some useful links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.ansible.com/ansible/intro.html&quot;&gt;Ansible Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://galaxy.ansible.com/explore#/&quot;&gt;Ansible Galaxy (tasks created by others)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ansible/ansible-examples&quot;&gt;Simple Ansible examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=tNCDsnQvbHI&quot;&gt;Cool youtube tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                    <pubDate>Tue May 02 2017 02:00:00 GMT+0200 (CEST)</pubDate>
                    <link>http://www.goschevski.com/the-mighty-ansible</link>
                    <guid isPermaLink="true">http://www.goschevski.com/the-mighty-ansible</guid>
                </item>
            
                <item>
                    <title>Simple JavaScript Interview Exercises</title>
                    <description>&lt;p&gt;When you are interviewing someone, you can learn more about them by reviewing how they did some exercises then talking with them about specific technology. Anyone can learn theory from the blog posts, but people rarely understood it. To be sure that candidate knows about the topic they are talking about, it&#39;s a good thing to test their knowledge with exercises. Exercises shouldn&#39;t take too long, and they can instantly show you a skill level of the candidate.&lt;/p&gt;
&lt;h3 id=&quot;context-call-apply-&quot;&gt;Context (call, apply)&lt;/h3&gt;
&lt;p class=&quot;lang-highlight&quot;&gt;This is how we want to use &lt;code class=&quot;hljs ebnf&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;someFn&lt;/span&gt;&lt;/code&gt;. Candidate should define it.&lt;/p&gt;
&lt;pre class=&quot;lang-highlight&quot;&gt;&lt;code class=&quot;lang-javascript hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = someFn({ &lt;span class=&quot;hljs-attr&quot;&gt;someProperty&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;interview&#39;&lt;/span&gt; }, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;hljs-string&quot;&gt;&#39;This pointing to&#39;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;);
});

&lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;hljs-string&quot;&gt;&#39;Result is&#39;&lt;/span&gt;, result);

&lt;span class=&quot;hljs-comment&quot;&gt;// expected output&lt;/span&gt;
This pointing to { &lt;span class=&quot;hljs-attr&quot;&gt;someProperty&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;interview&#39;&lt;/span&gt; }
Result is &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Solution:&lt;/p&gt;
&lt;pre class=&quot;lang-highlight&quot;&gt;&lt;code class=&quot;lang-javascript hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; someFn = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;obj, cb&lt;/span&gt;) &lt;/span&gt;{
    cb.call(obj);
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;bonus&quot;&gt;Bonus&lt;/h4&gt;
&lt;p class=&quot;lang-highlight&quot;&gt;You can change function to check if candidate knows how to use &lt;code class=&quot;hljs coq&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;apply&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;lang-highlight&quot;&gt;&lt;code class=&quot;lang-javascript hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = someFn({ &lt;span class=&quot;hljs-attr&quot;&gt;someProperty&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;interview&#39;&lt;/span&gt; }, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;param1, param2&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;hljs-string&quot;&gt;&#39;This pointing to&#39;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;);
    &lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;hljs-string&quot;&gt;&#39;Param 1 is&#39;&lt;/span&gt;, param1);
    &lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;hljs-string&quot;&gt;&#39;Param 2 is&#39;&lt;/span&gt;, param2);
}, [&lt;span class=&quot;hljs-string&quot;&gt;&#39;cool&#39;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&#39;interview&#39;&lt;/span&gt;]);

&lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;hljs-string&quot;&gt;&#39;Result is&#39;&lt;/span&gt;, result);

&lt;span class=&quot;hljs-comment&quot;&gt;// expected output&lt;/span&gt;
This pointing to { &lt;span class=&quot;hljs-attr&quot;&gt;someProperty&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;interview&#39;&lt;/span&gt; }
Param &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; is &lt;span class=&quot;hljs-string&quot;&gt;&quot;cool&quot;&lt;/span&gt;
Param &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; is &lt;span class=&quot;hljs-string&quot;&gt;&quot;interview&quot;&lt;/span&gt;
Result is &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Solution:&lt;/p&gt;
&lt;pre class=&quot;lang-highlight&quot;&gt;&lt;code class=&quot;lang-javascript hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; someFn = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;obj, cb, params&lt;/span&gt;) &lt;/span&gt;{
    cb.apply(obj, params);
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;prototype-and-iteration&quot;&gt;Prototype and Iteration&lt;/h3&gt;
&lt;p class=&quot;lang-highlight&quot;&gt;Define a native method called &lt;code class=&quot;hljs actionscript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;each&lt;/span&gt;&lt;/code&gt; for iterating over the array with an option to pass the context as a second argument.&lt;/p&gt;
&lt;pre class=&quot;lang-highlight&quot;&gt;&lt;code class=&quot;lang-javascript hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];
arr.each(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;arrayItem, counter&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;hljs-string&quot;&gt;&#39;index&#39;&lt;/span&gt;, counter);
    &lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;hljs-string&quot;&gt;&#39;item&#39;&lt;/span&gt;, arrayItem);

    arr[counter] = arrayItem + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;
}, &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Solution:&lt;/p&gt;
&lt;pre class=&quot;lang-highlight&quot;&gt;&lt;code class=&quot;lang-javascript hljs&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;Array&lt;/span&gt;.prototype.each = &lt;span class=&quot;hljs-built_in&quot;&gt;Array&lt;/span&gt;.prototype.each || &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;cb, context&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.length; i++) {
        cb.call(context || &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;[i], i);
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;scope&quot;&gt;Scope&lt;/h3&gt;
&lt;p class=&quot;lang-highlight&quot;&gt;Define &lt;code class=&quot;hljs ebnf&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;someFn&lt;/span&gt;&lt;/code&gt; which can work like this.&lt;/p&gt;
&lt;pre class=&quot;lang-highlight&quot;&gt;&lt;code class=&quot;lang-javascript hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; counter = someFn(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);
&lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;hljs-string&quot;&gt;&#39;First call&#39;&lt;/span&gt;, counter(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;));
&lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;hljs-string&quot;&gt;&#39;Second call&#39;&lt;/span&gt;, counter(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));
&lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;hljs-string&quot;&gt;&#39;Third call&#39;&lt;/span&gt;, counter(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;));

&lt;span class=&quot;hljs-comment&quot;&gt;// expected output&lt;/span&gt;
First call &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;
Second call &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;
Third call &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Solution:&lt;/p&gt;
&lt;pre class=&quot;lang-highlight&quot;&gt;&lt;code class=&quot;lang-javascript hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; someFn = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;start&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; private = start;

    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;increment&lt;/span&gt;) &lt;/span&gt;{
        private += increment;

        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; private;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
                    <pubDate>Thu Jan 14 2016 01:00:00 GMT+0100 (CET)</pubDate>
                    <link>http://www.goschevski.com/simple-javascript-interview-exercises</link>
                    <guid isPermaLink="true">http://www.goschevski.com/simple-javascript-interview-exercises</guid>
                </item>
            
                <item>
                    <title>Simple Grid Mixins</title>
                    <description></description>
                    <pubDate>Sat Nov 07 2015 01:00:00 GMT+0100 (CET)</pubDate>
                    <link>http://www.goschevski.com/simple-grid-mixins</link>
                    <guid isPermaLink="true">http://www.goschevski.com/simple-grid-mixins</guid>
                </item>
            
                <item>
                    <title>Vim Tips and Bindings</title>
                    <description>&lt;p&gt;I&#39;ve been using Vim as my editor for more than a year now, and I would like to share some cool tips and bindings that I&#39;ve collected or created so far.&lt;/p&gt;
&lt;h3 id=&quot;space-as-leader&quot;&gt;Space as Leader&lt;/h3&gt;
&lt;p&gt;The idea behind the &quot;Leader key&quot; is brilliant.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &quot;Leader key&quot; is a way of extending the power of Vim&#39;s shortcuts by using sequences of keys to perform a command.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;lang-highlight&quot;&gt;The default leader key is the backslash. Thus, if you have a map of &lt;code class=&quot;hljs apache&quot;&gt;&lt;span class=&quot;hljs-section&quot;&gt;&amp;lt;Leader&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;q&lt;/span&gt;&lt;/code&gt;, you can perform that action by typing \q. Like other developers, I remapped leader to a comma. I didn&#39;t know if that was the best thing to do, I&#39;d just seen it in every other vimrc. I read somewhere about Space as Leader. I tried it and results were awesome. Now I&#39;m able to hit Leader with both of my thumbs. Space is the biggest key on the keyboard, so it&#39;s hard to miss. This makes things easier and faster.&lt;/p&gt;
&lt;h3 id=&quot;ctrl-z&quot;&gt;Ctrl + Z&lt;/h3&gt;
&lt;p class=&quot;lang-highlight&quot;&gt;This is not feature of Vim, but since I&#39;m using Vim from the terminal, I will explain how this is useful. While you&#39;re in Vim, try hitting &lt;code class=&quot;hljs&quot;&gt;Ctrl+z&lt;/code&gt;. Shell will pause the Vim. You will be able to run commands inside the terminal, and then type &lt;code&gt;fg&amp;lt;Enter&amp;gt;&lt;/code&gt; to return to Vim. I use it for git commands, but you can run all the commands you need.&lt;/p&gt;
&lt;h3 id=&quot;remove-trailing-spaces-on-save&quot;&gt;Remove trailing spaces on save&lt;/h3&gt;
&lt;p&gt;If you&#39;re like me and you don&#39;t like trailing spaces, this function will help you. When you hit save, it will delete all trailing spaces in the file.&lt;/p&gt;
&lt;pre class=&quot;lang-highlight&quot;&gt;&lt;code class=&quot;lang-vim hljs&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;! &lt;span class=&quot;hljs-title&quot;&gt;StripTrailingWhitespaces&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;l&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;line&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;)
    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;c&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;col&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;)
    %s/\s\+$//&lt;span class=&quot;hljs-keyword&quot;&gt;e&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;cursor&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;l&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;c&lt;/span&gt;)
&lt;span class=&quot;hljs-keyword&quot;&gt;endfunction&lt;/span&gt;

&lt;span class=&quot;hljs-keyword&quot;&gt;autocmd&lt;/span&gt; BufWritePre * :&lt;span class=&quot;hljs-keyword&quot;&gt;call&lt;/span&gt; StripTrailingWhitespaces()&lt;span class=&quot;hljs-comment&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&quot;Note&quot;&gt;This might hurt your git history. For that reason, it might be better to create two commits, the first for clearing whitespaces and the second with code changes.&lt;/p&gt;

&lt;h3 id=&quot;extract-variable-javascript-&quot;&gt;Extract variable (javascript)&lt;/h3&gt;
&lt;p class=&quot;lang-highlight&quot;&gt;WebStorm refactoring options inspired me, so I tried to create something similar in Vim. This function extracts variables in javascript. Select the word you want to extract as a variable (with visual mode). Hit &lt;code class=&quot;hljs actionscript&quot;&gt;&amp;lt;Leader&amp;gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt;&lt;/code&gt; and Vim will prompt for the variable name. When you enter the name, a variable will be extracted in the row above. With my limited knowledge of vim script, this is best I can do.&lt;/p&gt;
&lt;pre class=&quot;lang-highlight&quot;&gt;&lt;code class=&quot;lang-vim hljs&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;! &lt;span class=&quot;hljs-title&quot;&gt;ExtractLocalVariable&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; name = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Variable name: &quot;&lt;/span&gt;)

    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;visualmode&lt;/span&gt;() == &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)
        normal! viw
    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;
        normal! &lt;span class=&quot;hljs-keyword&quot;&gt;gv&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;

    exec &lt;span class=&quot;hljs-string&quot;&gt;&quot;normal! c&quot;&lt;/span&gt; . name
    exec &lt;span class=&quot;hljs-string&quot;&gt;&quot;normal! Ovar &quot;&lt;/span&gt; . name . &lt;span class=&quot;hljs-string&quot;&gt;&quot; = &quot;&lt;/span&gt;
    exec &lt;span class=&quot;hljs-string&quot;&gt;&quot;normal! pa;&quot;&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;endfunction&lt;/span&gt;

&lt;span class=&quot;hljs-keyword&quot;&gt;vnoremap&lt;/span&gt; &lt;span class=&quot;hljs-symbol&quot;&gt;&amp;lt;Leader&amp;gt;&lt;/span&gt;var :&lt;span class=&quot;hljs-keyword&quot;&gt;call&lt;/span&gt; ExtractLocalVariable()&lt;span class=&quot;hljs-symbol&quot;&gt;&amp;lt;CR&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;my-vimrc&quot;&gt;My vimrc&lt;/h3&gt;
&lt;p&gt;Here is my &lt;a href=&quot;https://github.com/goschevski/dotfiles/blob/master/homefiles/vimrc&quot;&gt;vimrc&lt;/a&gt;. Feel free to copy and change anything from it. Check out the plugins I&#39;m using, and you might find something to fit.&lt;/p&gt;
</description>
                    <pubDate>Tue Jan 13 2015 01:00:00 GMT+0100 (CET)</pubDate>
                    <link>http://www.goschevski.com/vim-tips-and-bindings</link>
                    <guid isPermaLink="true">http://www.goschevski.com/vim-tips-and-bindings</guid>
                </item>
            
                <item>
                    <title>Thoughts on CSS Frameworks</title>
                    <description>&lt;p&gt;Developers use Foundation or Bootstrap unnecessarily, and they don&amp;#39;t know what the output of their CSS code is. I will try to explain my viewpoint about these kinds of frameworks, what their flaws are, and when might be a good time to use them.&lt;/p&gt;
&lt;h3 id=&quot;learning&quot;&gt;Learning&lt;/h3&gt;
&lt;p&gt;Newbies and juniors are coming down with something like jQuery syndrome, whereby they first learn how to use Bootstrap and Foundation, and later familiarize themselves with the core concepts of CSS. As my friend &lt;a href=&quot;https://github.com/vladimirsiljkovic&quot;&gt;Vladimir&lt;/a&gt; put it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;It&amp;#39;s like giving a fire hose to a kid and turning on the water.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can learn from frameworks, since they show, for example, useful image replacement techniques, grid setup. You can discover other smart concepts and learn how to use them.&lt;/p&gt;
&lt;h3 id=&quot;performance&quot;&gt;Performance&lt;/h3&gt;
&lt;p&gt;These frameworks are big. In fact, they are huge. Bootstrap minified is about 100kb, and Foundation is about 115kb. Yes, of course, you don&amp;#39;t to have to include the whole framework, but probably there is no need for the partials either.&lt;/p&gt;
&lt;p&gt;People include the grid module of the framework, and 90% of them are unaware of how that grid works. If they knew, they wouldn&amp;#39;t use it. Rather they would create their own. Of course, the design you&amp;#39;re coding must use a grid, but is that &lt;em&gt;always&lt;/em&gt; the case? After all, is it hard to &lt;a href=&quot;http://css-tricks.com/dont-overthink-it-grids&quot;&gt;create a grid&lt;/a&gt;?&lt;/p&gt;
&lt;h3 id=&quot;when-to-use-them&quot;&gt;When to use them&lt;/h3&gt;
&lt;p&gt;In some cases, it&amp;#39;s useful to use frameworks with ready-made components, such as when creating wireframes, presentations or admin panels. They&amp;#39;re also helpful tools for developers who are not sufficiently familiar with CSS, in that they allow them to create a layout quickly.&lt;/p&gt;
&lt;h3 id=&quot;what-s-the-alternative-&quot;&gt;What&amp;#39;s the alternative?&lt;/h3&gt;
&lt;p&gt;In a nutshell, use boilerplates. Create your starter folder or boilerplate, call it what you will. Create your set of mixins or styles that you use often. When you use frameworks, you start CSS with hundreds of lines of pre-written code. Ok, thousands. And when you initiate with your boilerplate, you only have what&amp;#39;s necessary for your projects.&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Don&amp;#39;t get me wrong, Bootstrap and Foundation are great, and you can learn a lot from looking at their code, but don&amp;#39;t use them for every single project because 90% of the time, you don&amp;#39;t need them.&lt;/p&gt;
</description>
                    <pubDate>Tue Sep 23 2014 02:00:00 GMT+0200 (CEST)</pubDate>
                    <link>http://www.goschevski.com/thoughts-on-css-frameworks</link>
                    <guid isPermaLink="true">http://www.goschevski.com/thoughts-on-css-frameworks</guid>
                </item>
            
                <item>
                    <title>JSHint Git Hook</title>
                    <description>&lt;h3 id=&quot;update&quot;&gt;Update&lt;/h3&gt;
&lt;p&gt;There is a module, called &lt;a href=&quot;https://www.npmjs.com/package/pre-commit&quot;&gt;pre-commit&lt;/a&gt;, which is working well, and it&amp;#39;s easy to set up.&lt;/p&gt;
&lt;h3 id=&quot;old-way&quot;&gt;Old way&lt;/h3&gt;
&lt;p&gt;If you want to write valid code, make sure you use a linter.
It&amp;#39;s good practice to have some &amp;#39;on save&amp;#39; linter to tell you what errors you made in the real time.
But, besides that, it would be nice to have some tool to lint files when you try to commit them.
Git has so-called &lt;a href=&quot;http://git-scm.com/docs/githooks.htm&quot;&gt;hooks&lt;/a&gt; (actions), which you can trigger at certain points (before you commit, after the commit, before the push, etc.).&lt;/p&gt;
&lt;p&gt;My pal &lt;a href=&quot;http://simplifiedstudio.com/&quot;&gt;Ivan Tatic&lt;/a&gt; created &lt;a href=&quot;https://github.com/goschevski/fronty/blob/937539dfebee434b710d0b31d55765973318a567/hooks.sh&quot;&gt;script&lt;/a&gt; that install git-hook for linting javascript files using &lt;a href=&quot;http://www.jshint.com/&quot;&gt;jshint&lt;/a&gt;.
If you try to commit some javascript files, jshint run a check on those files.
If there is a file with errors, it prints where you can find those errors.&lt;/p&gt;
&lt;p&gt;I created a demo, to show you how it works.&lt;/p&gt;
&lt;p&gt;&lt;iframe name=&#39;quickcast&#39; src=&#39;http://quick.as/embed/y1jibwx&#39; scrolling=&#39;no&#39; frameborder=&#39;0&#39; width=&#39;100%&#39; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;script src=&#39;http://quick.as/embed/script/1.60&#39;&gt;&lt;/script&gt;
</description>
                    <pubDate>Fri Aug 01 2014 02:00:00 GMT+0200 (CEST)</pubDate>
                    <link>http://www.goschevski.com/jshint-git-hook</link>
                    <guid isPermaLink="true">http://www.goschevski.com/jshint-git-hook</guid>
                </item>
            
                <item>
                    <title>Fixed and Fluid Columns</title>
                    <description>&lt;p&gt;We can create &quot;one column fixed and one column fluid&quot; layout using different techniques, but most of these solutions are kind of hacky and have some flaws like magic numbers, hard coded values, etc.&lt;/p&gt;
&lt;p&gt;We had a discussion on this topic in our office, and we tried to find the best solution. We googled it and tried different ways, but our colleague &lt;a href=&quot;https://github.com/vladimirsiljkovic&quot;&gt;≈†ilja&lt;/a&gt; came out with the best one.&lt;/p&gt;
&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;
&lt;pre class=&quot;lang-highlight&quot;&gt;&lt;code class=&quot;lang-html hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;main&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;aside&lt;/span&gt;&amp;gt;&lt;/span&gt;
        This is the fixed sidebar.
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;aside&lt;/span&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;
        This is fluid main section.
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;main&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the CSS:&lt;/p&gt;
&lt;pre class=&quot;lang-highlight&quot;&gt;&lt;code class=&quot;lang-css hljs&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:after&lt;/span&gt; {
    &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;
    &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: table;
    &lt;span class=&quot;hljs-attribute&quot;&gt;clear&lt;/span&gt;: both;
}

&lt;span class=&quot;hljs-selector-tag&quot;&gt;aside&lt;/span&gt; {
    &lt;span class=&quot;hljs-attribute&quot;&gt;float&lt;/span&gt;: left;
    &lt;span class=&quot;hljs-attribute&quot;&gt;max-width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;200px&lt;/span&gt;;
}

&lt;span class=&quot;hljs-selector-tag&quot;&gt;section&lt;/span&gt; {
    &lt;span class=&quot;hljs-attribute&quot;&gt;overflow&lt;/span&gt;: hidden;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This solution works in IE6+ browsers, and it has one flaw, and that is evident when you need to use overflow in a different way in the fluid section. No need for magic numbers or fixed values. Of course, this is the best solution until browsers start supporting flexbox.&lt;/p&gt;
&lt;p&gt;You can check out the demo on &lt;a href=&quot;http://codepen.io/goschevski/pen/zDGvh&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
</description>
                    <pubDate>Fri May 02 2014 02:00:00 GMT+0200 (CEST)</pubDate>
                    <link>http://www.goschevski.com/fixed-and-fluid-columns</link>
                    <guid isPermaLink="true">http://www.goschevski.com/fixed-and-fluid-columns</guid>
                </item>
            
                <item>
                    <title>Spriting with Sass and Compass</title>
                    <description></description>
                    <pubDate>Sun Mar 23 2014 01:00:00 GMT+0100 (CET)</pubDate>
                    <link>http://www.goschevski.com/spriting-with-sass-and-compass</link>
                    <guid isPermaLink="true">http://www.goschevski.com/spriting-with-sass-and-compass</guid>
                </item>
            
                <item>
                    <title>Better Collection Iteration in Backbone.js</title>
                    <description>&lt;p&gt;It&#39;s a trivial problem, but I&#39;ve seen this in beginner tutorials, and I don&#39;t like it. People are iterating over collections and creating Item views in the same function.&lt;/p&gt;
&lt;pre class=&quot;lang-highlight&quot;&gt;&lt;code class=&quot;lang-javascript hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; CollectionView = Backbone.View.extend({
    &lt;span class=&quot;hljs-attr&quot;&gt;tagName&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;ul&#39;&lt;/span&gt;,
    &lt;span class=&quot;hljs-attr&quot;&gt;className&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;list&#39;&lt;/span&gt;,

    &lt;span class=&quot;hljs-attr&quot;&gt;render&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
        &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.collection.each(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;) &lt;/span&gt;{
            &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.$el.append(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ItemView({ &lt;span class=&quot;hljs-attr&quot;&gt;model&lt;/span&gt;: item}).render().el);
        }, &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;);
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I consider this wrong because you can&#39;t reuse adding ItemView code.&lt;/p&gt;
&lt;pre class=&quot;lang-highlight&quot;&gt;&lt;code class=&quot;lang-javascript hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; CollectionView = Backbone.View.extend({
    &lt;span class=&quot;hljs-attr&quot;&gt;tagName&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;ul&#39;&lt;/span&gt;,
    &lt;span class=&quot;hljs-attr&quot;&gt;className&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;list&#39;&lt;/span&gt;,

    &lt;span class=&quot;hljs-attr&quot;&gt;initialize&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
        &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.listenTo(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.collection, &lt;span class=&quot;hljs-string&quot;&gt;&#39;add&#39;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.addOne);
    },

    &lt;span class=&quot;hljs-attr&quot;&gt;render&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
        &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.collection.each(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;) &lt;/span&gt;{
            &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.$el.append(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ItemView({ &lt;span class=&quot;hljs-attr&quot;&gt;model&lt;/span&gt;: item}).render().el);
        }, &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;);
    },

    &lt;span class=&quot;hljs-attr&quot;&gt;addOne&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;) &lt;/span&gt;{
        &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.$el.append(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ItemView({ &lt;span class=&quot;hljs-attr&quot;&gt;model&lt;/span&gt;: item }).render().el);
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you see, we need to duplicate code. A better solution is to use a different method.&lt;/p&gt;
&lt;pre class=&quot;lang-highlight&quot;&gt;&lt;code class=&quot;lang-javascript hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; CollectionView = Backbone.View.extend({
    &lt;span class=&quot;hljs-attr&quot;&gt;tagName&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;ul&#39;&lt;/span&gt;,
    &lt;span class=&quot;hljs-attr&quot;&gt;className&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&#39;list&#39;&lt;/span&gt;,

    &lt;span class=&quot;hljs-attr&quot;&gt;initialize&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
        &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.listenTo(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.collection, &lt;span class=&quot;hljs-string&quot;&gt;&#39;add&#39;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.addOne);
    },

    &lt;span class=&quot;hljs-attr&quot;&gt;render&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
        &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.collection.each(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.addOne, &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;);
    },

    &lt;span class=&quot;hljs-attr&quot;&gt;addOne&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;) &lt;/span&gt;{
        &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.$el.append(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ItemView({ &lt;span class=&quot;hljs-attr&quot;&gt;model&lt;/span&gt;: item }).render().el);
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this way, we are more flexible, and we haven&#39;t duplicated code.&lt;/p&gt;
</description>
                    <pubDate>Mon Feb 03 2014 01:00:00 GMT+0100 (CET)</pubDate>
                    <link>http://www.goschevski.com/better-collection-iteration-in-backbone-js</link>
                    <guid isPermaLink="true">http://www.goschevski.com/better-collection-iteration-in-backbone-js</guid>
                </item>
            
    </channel>
</rss>
